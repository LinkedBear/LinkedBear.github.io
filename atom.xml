<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinkedBear的GitHub</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-02T12:21:25.547Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LinkedBear</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>嵌入式容器：嵌入式Tomcat的优化和配置</title>
    <link href="http://yoursite.com/2019/12/02/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%B9%E5%99%A8%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8FTomcat%E7%9A%84%E4%BC%98%E5%8C%96%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/12/02/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%B9%E5%99%A8%EF%BC%9A%E5%B5%8C%E5%85%A5%E5%BC%8FTomcat%E7%9A%84%E4%BC%98%E5%8C%96%E5%92%8C%E9%85%8D%E7%BD%AE/</id>
    <published>2019-12-02T12:17:59.000Z</published>
    <updated>2019-12-02T12:21:25.547Z</updated>
    
    <content type="html"><![CDATA[<p>在以往的开发中我们可能会根据项目本身对 Tomcat 进行一些调整，以达到最大化利用 Tomcat 的目的。SpringBoot 使用嵌入式 Tomcat，再像之前那样做 Tomcat 性能调优就显得不那么现实了，为此我们需要了解如何在 SpringBoot 内部给嵌入式 Tomcat 做性能调优。本篇文章只做定<strong>性</strong>的解析，深入到<strong>量</strong>的控制本文不作详细探讨。</p><h2 id="0-调优前的准备"><a href="#0-调优前的准备" class="headerlink" title="0. 调优前的准备"></a>0. 调优前的准备</h2><p>为测试当前 SpringBoot 中嵌入式 Tomcat 的最大性能，需要一个压力测试工具来辅助我们测试性能，目前应用比较多的压测工具有 <strong>Bench</strong> 和 <strong>JMeter</strong> ，本文中使用 <code>Bench</code> 作为压测工具。</p><p>测试之前，咱先把工具准备好：</p><ul><li>Bench：<a href="https://www.apachelounge.com/download/" target="_blank" rel="noopener">https://www.apachelounge.com/download/</a></li><li>JMeter：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></li></ul><p>下载好之后，把这两个工具的环境变量都配置好，方便直接从控制台执行。</p><p>除此之外，把一开始的测试工程中加入一个测试的 <code>DemoController</code> ，用于接收请求压测（为模拟真实业务场景，会在 <code>DemoController</code> 中让线程随机阻塞 <code>100 - 500ms</code> ，以代替数据库连接和业务查询）。最后，把工程打成可执行jar包并启动，等待测试。</p><p>jar包启动的方式非常简单：<code>java -jar demo-0.0.1-SNAPSHOT.jar</code> </p><p>（本文在进行压测时的物理环境：Windows10 + Intel Core i7-8750H）</p><h2 id="1-使用Bench进行压测"><a href="#1-使用Bench进行压测" class="headerlink" title="1. 使用Bench进行压测"></a>1. 使用Bench进行压测</h2><p>在cmd中执行如下命令：</p><p><code>ab -n 10000 -c 500 http://localhost:8080/test</code></p><p>执行完成后会在控制台打印测试报告：（<strong>报告中的指标解释已标注在行尾</strong>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">This</span> <span class="string">is</span> <span class="string">ApacheBench,</span> <span class="string">Version</span> <span class="number">2.3</span> <span class="string">&lt;$Revision:</span> <span class="number">1843412</span> <span class="string">$&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="string">Copyright</span> <span class="number">1996</span> <span class="string">Adam</span> <span class="string">Twiss,</span> <span class="string">Zeus</span> <span class="string">Technology</span> <span class="string">Ltd,</span> <span class="string">http://www.zeustech.net/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="string">Licensed</span> <span class="string">to</span> <span class="string">The</span> <span class="string">Apache</span> <span class="string">Software</span> <span class="string">Foundation,</span> <span class="string">http://www.apache.org/</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">Benchmarking</span> <span class="string">localhost</span> <span class="string">(be</span> <span class="string">patient)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">1000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">2000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">3000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">4000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">5000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">6000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">7000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">8000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">9000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="string">Completed</span> <span class="number">10000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="string">Finished</span> <span class="number">10000</span> <span class="string">requests</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Server Software:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Server Hostname:</span>        <span class="string">localhost</span> <span class="string">//</span> <span class="string">主机名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Server Port:</span>            <span class="number">8080</span>      <span class="string">//</span> <span class="string">端口号</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Document Path:</span>          <span class="string">/test</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Document Length:</span>        <span class="number">4</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Concurrency Level:</span>      <span class="number">500</span>            <span class="string">//</span> <span class="string">并发量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time taken for tests:</span>   <span class="number">15.670</span> <span class="string">seconds</span> <span class="string">//</span> <span class="string">所有请求的总耗时</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Complete requests:</span>      <span class="number">10000</span>          <span class="string">//</span> <span class="string">成功的请求数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed requests:</span>        <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Total transferred:</span>      <span class="number">1360000</span> <span class="string">bytes</span>  <span class="string">//</span> <span class="string">总传输数据量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="attr">HTML transferred:</span>       <span class="number">40000</span> <span class="string">bytes</span>    <span class="string">//</span> <span class="string">总响应数据量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Requests per second:</span>    <span class="number">638.17</span> <span class="string">[#/sec]</span> <span class="string">(mean)</span> <span class="string">//</span> <span class="string">【重要】每秒执行的请求数量（吞吐量）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">783.493</span> <span class="string">[ms]</span> <span class="string">(mean)</span>   <span class="string">//</span> <span class="string">【重要】客户端平均响应时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">1.567</span> <span class="string">[ms]</span> <span class="string">(mean,</span> <span class="string">across</span> <span class="string">all</span> <span class="string">concurrent</span> <span class="string">requests)</span> <span class="string">//</span> <span class="string">服务器平均请求等待时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Transfer rate:</span>          <span class="number">84.76</span> <span class="string">[Kbytes/sec]</span> <span class="string">received</span> <span class="string">//</span> <span class="string">每秒传输的数据量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="string">Connection</span> <span class="string">Times</span> <span class="string">(ms)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">              <span class="string">min</span>  <span class="string">mean[+/-sd]</span> <span class="string">median</span>   <span class="string">max</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Connect:</span>        <span class="number">0</span>    <span class="number">0</span>   <span class="number">0.2</span>      <span class="number">0</span>       <span class="number">1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Processing:</span>   <span class="number">105</span>  <span class="number">738</span> <span class="number">135.1</span>    <span class="number">742</span>     <span class="number">993</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Waiting:</span>      <span class="number">105</span>  <span class="number">738</span> <span class="number">135.2</span>    <span class="number">742</span>     <span class="number">993</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Total:</span>        <span class="number">105</span>  <span class="number">738</span> <span class="number">135.1</span>    <span class="number">742</span>     <span class="number">993</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="string">Percentage</span> <span class="string">of</span> <span class="string">the</span> <span class="string">requests</span> <span class="string">served</span> <span class="string">within</span> <span class="string">a</span> <span class="string">certain</span> <span class="string">time</span> <span class="string">(ms)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  <span class="number">50</span><span class="string">%</span>    <span class="number">742</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">  <span class="number">66</span><span class="string">%</span>    <span class="number">810</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">  <span class="number">75</span><span class="string">%</span>    <span class="number">847</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  <span class="number">80</span><span class="string">%</span>    <span class="number">868</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">  <span class="number">90</span><span class="string">%</span>    <span class="number">909</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">  <span class="number">95</span><span class="string">%</span>    <span class="number">931</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">  <span class="number">98</span><span class="string">%</span>    <span class="number">945</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">  <span class="number">99</span><span class="string">%</span>    <span class="number">952</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"> <span class="number">100</span><span class="string">%</span>    <span class="number">993</span> <span class="string">(longest</span> <span class="string">request)</span></span></pre></td></tr></table></figure><p>在测试报告中有两个重要的指标需要咱来关注：</p><ul><li><strong>Requests per second</strong>：每秒执行的请求数量（吞吐量）<ul><li>吞吐量越高，代表性能越好</li></ul></li><li><strong>Time per request</strong>：客户端平均响应时间<ul><li>响应时间越短，代表性能越好</li></ul></li></ul><p>在这里面测得的结果是 638.17 的吞吐量，783.493ms 的平均响应时间，这个响应时间比代码中控制的阻塞时间更长，说明 Tomcat 对500的并发已经有一些吃力了。</p><p>下面咱再用更大的并发量来测试效果：</p><p><code>ab -n 50000 -c 2000 http://localhost:8080/test</code></p><p>测得的结果（截取主要部分）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Concurrency Level:</span>      <span class="number">2000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time taken for tests:</span>   <span class="number">75.689</span> <span class="string">seconds</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Complete requests:</span>      <span class="number">50000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed requests:</span>        <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Total transferred:</span>      <span class="number">6800000</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="attr">HTML transferred:</span>       <span class="number">200000</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Requests per second:</span>    <span class="number">660.60</span> <span class="string">[#/sec]</span> <span class="string">(mean)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">3027.564</span> <span class="string">[ms]</span> <span class="string">(mean)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">1.514</span> <span class="string">[ms]</span> <span class="string">(mean,</span> <span class="string">across</span> <span class="string">all</span> <span class="string">concurrent</span> <span class="string">requests)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Transfer rate:</span>          <span class="number">87.74</span> <span class="string">[Kbytes/sec]</span> <span class="string">received</span></span></pre></td></tr></table></figure><p>发现<strong>吞吐量没有什么太大的变化</strong>，但<strong>平均响应时间大幅提升，且大概为上面的4倍</strong>。可以看得出来，Tomcat 的处理速度已经远远跟不上请求到来的速度，需要进行性能调优。</p><h2 id="2-嵌入式Tomcat调优依据"><a href="#2-嵌入式Tomcat调优依据" class="headerlink" title="2. 嵌入式Tomcat调优依据"></a>2. 嵌入式Tomcat调优依据</h2><p>调优一定要有依据，咱根据现状和之前对 SpringBoot 的学习和原理剖析，应该知道配置大多都是两种形式：</p><ul><li>声明式配置：<code>application.properties</code> 或 <code>application.yml</code></li><li>编程式配置：<code>XXXConfigurer</code> 或 <code>XXXCustomizer</code></li></ul><p>其中，利用配置文件进行配置，最终会映射到 SpringBoot 中的一些 Properties 类中，例如 <code>server.port</code> 配置会映射到 <code>ServerProperties</code> 类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"server"</span>, ignoreUnknownFields = <span class="keyword">true</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProperties</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> Integer port;</span></pre></td></tr></table></figure><p>那我们来大体分析一下对于 Tomcat 的声明式配置，都有哪些可以控制的部分：</p><h3 id="2-1-Tomcat的声明式配置"><a href="#2-1-Tomcat的声明式配置" class="headerlink" title="2.1 Tomcat的声明式配置"></a>2.1 Tomcat的声明式配置</h3><p>在 <code>ServerProperties</code> 类中，有一个 Tomcat 的静态内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Tomcat properties.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Tomcat</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">       <span class="comment">// ......</span></span></pre></td></tr></table></figure><p>这里面就是配置嵌入式 Tomcat 的可以供我们配置的映射配置类。咱来看里面的核心属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Maximum amount of worker threads.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 最大工作线程数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxThreads = <span class="number">200</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Minimum amount of worker threads.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 最小工作线程数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> minSpareThreads = <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Maximum number of connections that the server accepts and processes at any</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * given time. Once the limit has been reached, the operating system may still</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * accept connections based on the "acceptCount" property.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 服务器最大连接数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxConnections = <span class="number">10000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * Maximum queue length for incoming connection requests when all possible request</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * processing threads are in use.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 最大请求队列等待长度</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> acceptCount = <span class="number">100</span>;</span></pre></td></tr></table></figure><p>可以发现这里面的几个指标，分别控制连接数、线程数、等待数。</p><p>咱来分析为什么上面的吞吐量不够大：请求中的关键耗时动作是 <code>Thread.sheep</code> 卡线程，导致吞吐量变大。<code>Thread.sleep</code> 模拟了IO操作、数据库交互等<strong>非CPU高速计算的行为</strong>，在数据库交互时，CPU资源被浪费，导致无法处理后来的请求，出现资源利用率低的现象。为此，我们需要提高请求并发数，以此来提高CPU利用率。提高请求并发的方法在上面的几个参数中很明显是 <strong><code>maxThreads</code></strong> 。</p><h2 id="3-调整maxThreads"><a href="#3-调整maxThreads" class="headerlink" title="3. 调整maxThreads"></a>3. 调整maxThreads</h2><p>从源码中很明显看到默认的最大线程数是200，我们在 <code>application.properties</code> 中修改值为 500：</p><p><code>server.tomcat.max-threads=500</code></p><p>修改之后的测试：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Concurrency Level:</span>      <span class="number">2000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time taken for tests:</span>   <span class="number">30.910</span> <span class="string">seconds</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Complete requests:</span>      <span class="number">50000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed requests:</span>        <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Total transferred:</span>      <span class="number">6800000</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="attr">HTML transferred:</span>       <span class="number">200000</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Requests per second:</span>    <span class="number">1617.61</span> <span class="string">[#/sec]</span> <span class="string">(mean)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">1236.391</span> <span class="string">[ms]</span> <span class="string">(mean)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">0.618</span> <span class="string">[ms]</span> <span class="string">(mean,</span> <span class="string">across</span> <span class="string">all</span> <span class="string">concurrent</span> <span class="string">requests)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Transfer rate:</span>          <span class="number">214.84</span> <span class="string">[Kbytes/sec]</span> <span class="string">received</span></span></pre></td></tr></table></figure><p>发现吞吐量有明显的提升，且吞吐量的放大倍数大概是前面线程数为 200 时的2.5倍。继续放大该值为 2000：</p><p><code>server.tomcat.max-threads=2000</code></p><p>重新测试效果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Concurrency Level:</span>      <span class="number">2000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time taken for tests:</span>   <span class="number">12.050</span> <span class="string">seconds</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Complete requests:</span>      <span class="number">50000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed requests:</span>        <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Total transferred:</span>      <span class="number">6800000</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="attr">HTML transferred:</span>       <span class="number">200000</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Requests per second:</span>    <span class="number">4149.38</span> <span class="string">[#/sec]</span> <span class="string">(mean)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">482.000</span> <span class="string">[ms]</span> <span class="string">(mean)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">0.241</span> <span class="string">[ms]</span> <span class="string">(mean,</span> <span class="string">across</span> <span class="string">all</span> <span class="string">concurrent</span> <span class="string">requests)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Transfer rate:</span>          <span class="number">551.09</span> <span class="string">[Kbytes/sec]</span> <span class="string">received</span></span></pre></td></tr></table></figure><p>吞吐量又一次明显上升，但注意此时的吞吐量并没有扩大到上一次的 4 倍。继续放大该值为 10000：</p><p><code>server.tomcat.max-threads=10000</code></p><p>重新测试效果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Concurrency Level:</span>      <span class="number">2000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time taken for tests:</span>   <span class="number">13.808</span> <span class="string">seconds</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Complete requests:</span>      <span class="number">50000</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Failed requests:</span>        <span class="number">0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Total transferred:</span>      <span class="number">6800000</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="attr">HTML transferred:</span>       <span class="number">200000</span> <span class="string">bytes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Requests per second:</span>    <span class="number">3621.22</span> <span class="string">[#/sec]</span> <span class="string">(mean)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">552.300</span> <span class="string">[ms]</span> <span class="string">(mean)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Time per request:</span>       <span class="number">0.276</span> <span class="string">[ms]</span> <span class="string">(mean,</span> <span class="string">across</span> <span class="string">all</span> <span class="string">concurrent</span> <span class="string">requests)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="attr">Transfer rate:</span>          <span class="number">480.94</span> <span class="string">[Kbytes/sec]</span> <span class="string">received</span></span></pre></td></tr></table></figure><p>发现吞吐量竟然下降了！为什么会出现这种现象呢？</p><h2 id="4-现象解释"><a href="#4-现象解释" class="headerlink" title="4. 现象解释"></a>4. 现象解释</h2><p>要解释这个原因，就不得不提到 CPU 的工作原理了。当CPU的<strong>核心线程数</strong>小于当前应用线程时，CPU为了保证所有应用线程都正常执行，它会<strong>在多个线程中来回切换</strong>，以保证每个线程都能获得CPU时间。在一个确定的时间点中，一个CPU只能处理一个线程。</p><p>所以这个现象就可以这样解释：当开启的 Tomcat 线程过多时，CPU会消耗大量时间在这些 Tomcat 线程中来回切换，导致真正处理业务请求的时间变少，最终导致整体应用处理速度变慢。</p><p>由此也可以推出另一种可能：如果业务逻辑中有大量CPU处理工作（如运算、处理数据等），则CPU需要更多的时间用于计算，此时若 Tomcat 线程过多，则处理速度会更慢。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>由上面的情况可以总结出以下结论：</p><ul><li>应用中大部分业务逻辑都是阻塞型处理（IO、数据库操作等），这种情况下CPU的压力较低，可以适当调大 <code>maxThreads</code> 的值大小。</li><li>应用中大部分业务逻辑都是数据处理和计算，这种情况下CPU的压力较大，应适当调小 <code>maxThreads</code> 的值大小。</li></ul>]]></content>
    
    <summary type="html">
    
      在以往的开发中我们可能会根据项目本身对 Tomcat 进行一些调整，以达到最大化利用 Tomcat 的目的。SpringBoot 使用嵌入式 Tomcat，再像之前那样做 Tomcat 性能调优就显得不那么现实了，为此本文解释如何在 SpringBoot 内部给嵌入式 Tomcat 做性能调优。
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="Tomcat, 嵌入式容器, SpringBoot" scheme="http://yoursite.com/tags/Tomcat-%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%B9%E5%99%A8-SpringBoot/"/>
    
  </entry>
  
</feed>
